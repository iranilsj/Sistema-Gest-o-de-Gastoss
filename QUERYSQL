-- CRIAR NOVO BANCO DE DADOS
    CREATE DATABASE LOTERIAS;

-- REMOVER BANCO DE DADOS
    DROP DATABASE NOME_DO_BANCO;

-- SELECIONAR BANCO DE DADOS A SER USADO 
    USE LOTERIAS;

-- CRIAR NOVA TABELAS NO BANCO
    CREATE TABLE NOME_DA_TABELA(
-- NOME DA COLUNA E TIPO PRIMITIVO, TAMANHO DE ESPAÇOS 
	NOME VARCHAR(30),
    IDADE TINYINT,
    -- (M) OU (F)
    SEXO CHART(1)
    -- TIPO FLUTUANTE  (DECIMAIS)
    PESO FLOAT,
    ALTURA FLOAT,
    NACIONALIDADE VARCHAR(220)
    );
  
-- GERANDO INFORMACOES PIMITIVAS DA TABELA  CRIADA
    DESCRIBE CURSOS;

 
-- CRIANDO BANCO DE DADOS COM CONSTRAINTS + COLLATION 
    -- CONSTRAINTS
    -- 1) NOT NULL - PARA OBRIGAR O PREENCHIMENTO 
    -- 2) DEFAULT 'BRASIL' - QUANDO NAO FOI PREENCHIDO VAI SER USADO COMO PARDÃO

    -- COLLATION 
    -- 1) DEFAULT CHARACTER SET UTF8
    -- 2)DEFAULT COLLATE UTF8_GENERAL_CI

        CREATE DATABASE NOME_DO_BANCO
        DEFAULT CHARRACTER SET UTF8
        DEFAULT COLLATE UTF8_GENERAL_CI;

        CREATE TABLE NOME_DA_TABLEA(
	    ID INT NOT NULL AUTO_INCREMENT,
        NOME VARCHAR(30) NOT NULL,
        SEXO ENUM('M', 'F'),
    -- 5 SIGNIFICA QUANTIDADE DE CASAS E 2  QUANTIDADE DE CASAS ANTES DA VIRGULA
        PESO DECIMAL(5,2),
        ALTURA DECIMAL(5,2),
        NACIONALIDADE VARCHAR(20) DEFAULT 'BRASIL',
	    PRIMARY KEY (ID)
        )
        DEFAULT CHARSET = UFT8;
    

(-- INSERIR DADOS NA TABELA

-- VALUES = INFORMAOES A SEREM INSERIDAS
INSERT INTO NOME_DA_TABELA
	-- COLOCAR OS DADOS CONFORME SEGUE MODELO DA COLUNA ABAIXO 
    -- (NOME, DATA_NASCIMENTO, SEXO, PESO, ALTURA, NACIONALIDADE)
    VALUES 
		('MARIA', '1982-05-20', 'F', '74.5', '1.70', ' PORTUGAL');
)

(-- VERIFICAR AS INFORMACÕES INSERIDAS NA TABELA 
	SELECT * FROM NOME_DA_TABELA;
    )

(-- ALTERANDO A ESTRUTURA DA TABLEA (ALTER TABLE E DROP TABLE)

-- ADICIONANDO UMA COLUNA NOMA 
ALTER TABLE NOME_DA_TABELA ADD COLUMN PROFISSAO VARCHAR(10);

-- DELETANTE UMA COLUNA
ALTER TABLE NOME_DA_TABELA DROP COLUMN PROFISSAO;
)

(-- ADICIONANDO POSICAO DA COLUNA DENTRO DA TABELA

-- SIGNIFICA QUE A NOVA COLUNA PROFISAO VAI FICAR LOCADA DEPOIS DA COLUNA DE NOME
ALTER TABLE NOME_DA_TABLEA
ADD COLUMN PROFISSAO VARCHAR(10) AFTER NOME;
)

(-- ALTERANDO POSICAO DA COLUNA DENTTRO DA TABELA 

-- SIGNIFICA QUE  ESTA ALTERANDO A COLUNA JA EXISTENTE DE LUGAR  VAI FICAR EM PRIMEIRO LUGAR 
ALTER TABLE NOME_DA_TABELA
ADD COLUMN NOME_DA_COLUNA INT FIRST;
)

(-- ALTERAR A ESTRUTUDA DE DEFINICAO DA COLUNA 

-- ALTERANDO TIPO PRIMITIVO,, CONSTRAINTS E/OU COLLATION
ALTER TABLE NOME_DATABELA
MODIFY COLUMN NOME_DA_COLUNA VARCHAR(20) NOT NULL;
)

(-- ALTERAR NOME DE UMA COLUNA 

-- SEMPRE COLOCAR O NOME ANTIGO DEPOIS O NOME
ALTER TABLE NOME_DA_TABELA
CHANGE COLLUMN (DATA_NASCIMENTO) (NOME) DATE NOT NULL;
)

(-- RENOMEAR A TABLE

-- PRIMEIRO NOME ORIGINAL DEPOIS O NOME NOME 

--CONFERRIR CODIGO
RENAME TABLE NOME_DA_TABELA_ANTIGA TO NOME_DA_TABELA_NOVA;
)

 (-- CRIAR NOVA TABELA NO MESMO BANCO
 -- UNIQUE -> PARA TER APENAS UM REGISTRO COM O NOME
 -- UNSIGNER -> PARA NAO CADASTRAR  NUMEROS NEGATIVOS
 -- DEFAULT '2024'-> PARA NAO CADASTRAR  ANOS ANTERIORES
 
 CREATE TABLE IN NOT EXISTS NOME_DA_TABELA(
	NOME VARCHAR(30) NOT NULL UNIQUE,
    DESCRICAO TEXT,
    CARGAR INT UNSIGNED,
    ANO YEAR DEFAULT '2024'
    )DEFAULT CHARSET = UTF8;
    )

(-- ADICIONANDO CHAVE PRIMARIA
ALTER TABLE NOME_DA_COLUNA 
ADD PRIMARY KEY(ID);
)

(-- DROP / APAGAR  BANCO DE DADOS
DROP DATABASE NOME_DO_BANCO;
)

(-- DROP / APAGAR TABELA DO BANCO
DROP TABLE IF EXISTS NOME_DA_TABELA;
)

(-- MANIPULANDO REGISTROS - (LINHAS) - (TUPLAS)  UPDATE - DELETE - TRANCATE

-- INSERIR DADOS NO BANCO - VALUES = INFORMAOES A SEREM INSERIDAS
INSERTO INTO NOME_DA_TABELA VALUES 
('1', 'HTML4', 'Curso de HTML5', '40', '37', '2024'),
('2', 'Algoritmos', 'lógica de programação', '20', '15', '2024'),
('3', 'Photshop', 'Dicas de Photoshop CC', '10', '8', '2024'),
('4', 'PGP', 'Curso de PHP para iniciantes', '40', '20', '2024'),
('5', 'HTML44', 'Curso de HTML5', '40', '37', '2024'),
('6', 'HTML41', 'Curso de HTML5', '40', '37', '2024'),
('7', 'HTML411', 'Curso de HTML5', '40', '37', '2024'),
('8', 'HTML43', 'Curso de HTML5', '40', '37', '2024'),
('9', 'HTML47', 'Curso de HTML5', '40', '37', '2024'),
('10', 'HTML49', 'Curso de HTML5', '40', '37', '2024');

-- UPDADE - ATUALIZAR
UPDATE NOME_DA_TABELA
-- SET -DEFINIR
SET  NOME_DA_COLUNA = 'NOME_QUE_VAI SER_ALTERADO'
-- WHERE - ONDE A ALTERACAO VVAI SER FEITA
WHERE NOME_DA_COLUNA = 'NOME_DA LINHA'; --  NORMALMENTE UTILIZADO O ID

-- ALTERANDO DOIS DADOS DA MESMA LINHA 
UPDATE NOME_DA_TABELA 
SET NOME_DA_COLUNA = 'PHP', NOME_DA_COLUNA = '2025'
WHERE ID = '4';

-- LIMITANDO APENAS 1 REGISTRO

-- USANDO LIMIT
UPDATE NOME_DA_TABELA
SET NOME_DA_COLUNA = 'PHP', ANO  = '2025' 
WHERE ID = '4'
LIMIT 1;

UPDATE NOME_DA_TABELA
SET NOME_DA_COLUNA = 'PHP', ANO = '2025'
WHERE ANO = '2025';

-- DELETE

-- DELETAR APENAS UMA LINHA (4)
DELETE FROM NOME_DA_TABELA 
WHERE IDCURSOS = '4';

-- OU 
DELETE FROM NOME_DA_TABELA
WHERE ANO = '2025'
LIMIT  1;

-- APAGAR TODAS AS LINHAS DA TABELA - TRUNCATE

TRUNCATE TABLE NOME_DA_TABELA;
)



-- ---------------------------------------------------------------------


insert into mega_sena
values
(default, '2701', '2024-03-16', '06', '15', '18', '31', '32', '47');

-- COPIAR TABELA PARA OUTRO BANCO
CREATE TABLE loterias.mega_sena LIKE mega_sena.mega_sena;
-- COPIAR DADOS PARA TABELA DE OUTRO BANCO
INSERT loterias.mega_sena SELECT * FROM mega_sena.mega_sena;

SELECT
	SELECT n1, COUNT(*) AS total FROM mega_sena GROUP BY n1,
	SELECT n2, COUNT(*) AS total FROM mega_sena GROUP BY n2,
	SELECT n3, COUNT(*) AS total FROM mega_sena GROUP BY n3,
	SELECT n4, COUNT(*) AS total FROM mega_sena GROUP BY n4,
	SELECT n5, COUNT(*) AS total FROM mega_sena GROUP BY n5,
	SELECT n6, COUNT(*) AS total FROM mega_sena GROUP BY n6;


SELECT n3, COUNT(*) AS total FROM mega_sena GROUP BY n3;

SELECT 
    (SELECT COUNT(*) FROM tabela_exemplo WHERE coluna1 = 10) AS coluna1_count,
    (SELECT COUNT(*) FROM tabela_exemplo WHERE coluna2 = 10) AS coluna2_count,
    (SELECT COUNT(*) FROM tabela_exemplo WHERE coluna3 = 10) AS coluna3_count,
    ...,
    (SELECT COUNT(*) FROM tabela_exemplo WHERE colunaN = 10) AS colunaN_count;
-- -----------------------------------------------------------------------------



-- SELECT DO BANCO DE DE DADOS CADASTRO  -------------------------------------------------------------------------


-- SELEC 1  

-- PARA ORDENAR POR ORDEM ALFABETICA POR COLUNA
-- ASC PARA ACENDENTE
-- DESC ALFABETICA INVERSA

select * from cursos
ORDER BY nome DESC;

SELECT * FROM CURSOS
ORDER BY nome asc;

-- -----------------------------------------------------------------------------------------------------

-- SELECIONAR COLUNAS ESPECIFICAS 
--  SEGUINDO A SEQUENCIA DE COLONAS PELA ORDEM DIGITADA

SELECT NOME, CARGA, ANO FROM CURSOS
ORDER BY ANO, NOME;

-- ----------------------------------------------------------------------------------------------------

-- SELECIONANDO AS LINHAS ESPECIFICAS
-- WHERE

SELECT * FROM CURSOS 
WHERE ANO = '2016'
ORDER BY NOME;

-- Filtrar linha e colunas especificas

SELECT nome, carga FROM CURSOS 
WHERE ANO = '2016'
ORDER BY NOME;

select nome, descricao,ano  from cursos
where ano <= '2015'
order by nome;

-- ----------------------- enttre ano e outro ---------------------------

select nome, ano from cursos
where ano between 2014 and 2016
order by ano desc, nome asc;

-- SELECIONANDO VALORES ------

select nome, descricao, ano from cursos
where ano in (2014, 2016)
order by ano;

-- ---------- 	COMBINANDO TESTES -------
-- and 
-- or

 select * from cursos
 where carga > 35 and totaulas <30
 order by nome;
 
 -- SELECAO POR NOME ---
 
 SELECT * FROM CURSOS
 WHERE NOME = 'php';
 
-- OPERADOR LINKE= SEMELHANTE OU PARECIDO COM WILDCARD
 
-- QUANDO SIMBOLO DE % APARECE DEPOIS SIGNIFICA QUE A LETRA MOSTRADA SERA QUE ESTA A FRENTE
-- QUANDO SIMBOLO DE % APARECE ANTES SIGNIFICA QUE A LETRA MOSTRADA SERA QUE ESTA DEPOIS 
-- QUANDO SIMBOLO ADE % APARECE ANTES E DEPOIS PODE TER QUALQUER COISA NA FRETE E ATRAS OU NADA
 
SELECT * FROM CURSOS WHERE NOME LIKE 'P%';
SELECT * FROM CURSOS WHERE NOME LIKE '%A';
SELECT * FROM CURSOS WHERE NOME LIKE '%A%';
select * from  cursos where not nome like '%a%';
select * from cursos where nome like 'Ph%p';
select * from cursos where nome like 'Ph%p%';
select * from cursos where nome like 'Ph%p_';
select * from cursos where nome like 'p_t%';

-- DISTINGUINDO----
-- DISTINCT

SELECT DISTINCT CARGA FROM CURSOS;
SELECT DISTINCT CARGA FROM CURSOS
ORDER BY CARGA;


-- FUNÇÕES DE AGREGAÇÕES -----------------------------------
{
-- CONTAR
select count(*) from cursos;
SELECT COUNT(*) FROM  CURSOS WHERE CARGA > 40;
-- MAXIMO E MINIMO
SELECT MAX(CARGA) FROM CURSOS;
SELECT MIN(CARGA) FROM CURSOS;
SELECT MAX(TOTAULAS) FROM CURSOS;
SELECT MAX(TOTAULAS) FROM CURSOS WHERE ANO = '2016';
-- SOMAR
SELECT SUM(TOTAULAS) FROM CURSOS;
SELECT SUM(TOTAULAS) FROM CURSOS WHERE ANO = '2016';
-- ---------------------MÉDIA-------------------------
SELECT AVG(TOTAULAS)  FROM CURSOS;
SELECT AVG(TOTAULAS) FROM CURSOS WHERE ANO = '2016';
)

)


select * from cursos;

-- AGRUPANDO

SELECT CARGA FROM CURSOS
GROUP BY CARGA;

-- AGRUPANDO E AGREGANDO 
-- MEGA
SELECT CARGA, COUNT(NOME)  FROM CURSOS
GROUP BY CARGA;

SELECT CARGA, COUNT(NOME) FROM CURSOS WHERE TOTAULAS = 30
GROUP BY CARGA;
 -- MEGA MEGA MEGA
SELECT ANO, COUNT(*) FROM CURSOS
GROUP BY ANO
ORDER BY COUNT(*);

-- ANOS COM MAIS INCIDENCIA DE CURSOS
SELECT ANO, COUNT(*) FROM CURSOS
GROUP BY ANO
HAVING COUNT(ANO) >=5
ORDER BY COUNT(*) DESC;

SELECT ANO, COUNT(*) FROM CURSOS
GROUP BY ANO
HAVING ANO > 2016
ORDER BY COUNT(*) DESC;

-- WHERE
SELECT ANO, COUNT(*) FROM CURSOS
WHERE TOTAULAS >30
GROUP BY ANO
HAVING ANO > 2013
ORDER BY COUNT(*) DESC;

SELECT AVG(CARGA) FROM CURSOS;

SELECT CARGA, COUNT(*) FROM CURSOS
WHERE ANO > 2015;
GROUP BY CARGA;

-- JUNTAR SELECT

SELECT CARGA, COUNT(*) FROM CURSOS
WHERE ANO > 2015
GROUP BY CARGA
HAVING CARGA > (SELECT AVG(CARGA) FROM CURSOS);


lter table gafanhotos add column cursopreferido int;

describe gafanhotos;

 -- CHAVES ESTRANGEIRAS
 
 alter table gafanhotos
 add foreign  key  (cursopreferido)
 references cursos(idcurso);
 -- MUL -> SIGNIFICA CHAVE MULTIPLA
 
 select * from gafanhotos;
 select * from cursos;
 
 -- ESCOLHA DO CURSO CURSO 
-- atualizar a  tabela  (definir) a culuna  = 'numero do id do curso a ser selecioanado' onde = escolher o o codigo do aluno
 update gafanhotos set cursopreferido = '6' where id = '1';
 
 -- JUNÇÕES  DE TABELAS.
 select * from cursos;
 
 select gafanhotos.nome, mega_senacursos.nome, cursos.ano
 from gafanhotos  join  cursos
 on cursos.idcurso = gafanhotos.cursopreferido;
 
 describe mega_sena;

 select gafanhotos.nome, cursos.nome, cursos.ano
from gafanhotos inner join cursos
on cursos.idcurso = gafanhotos.cursopreferido
order by gafanhotos.nome;
-- ------------------------------
select g.nome,  c.nome, c.ano
from gafanhotos as g left outer join cursos as c 
on c.idcurso = g.cursopreferido;

describe gafanhotos;



create table gafanhoto_assiste_curso (
	id int not null auto_increment,
    data_nascimento date,
    idgafanhoto int,
    idcurso int,
    primary key (id),
    foreign key (idgafanhoto) references gafanhotos(id),
    foreign key (idcurso) references cursos(idcurso)
) default charset = utf8;

insert into gafanhoto_assiste_curso
values
(default,  '2024-03-26', '1', '2');

select * from gafanhoto_assiste_curso;



-- JUNTAR 

select g.id, g.nome, a.idgafanhoto, idcurso from gafanhotos g
join gafanhoto_assiste_curso a
on g.id = a.idgafanhoto;
-- -------------------------------------
select  g.nome, c.nome from gafanhotos g
join gafanhoto_assiste_curso a
on g.id = a.idgafanhoto
join cursos c
on c.idcurso = a.idcurso
order by g.nome;



select numero_1, count(*) from mega_sena
group by numero_1;


select numero_1, numero_2, numero_3, numero_4,numero_5, numero_6, count(*) as total from mega_sena  group by numero_1, numero_2, numero_3,numero_4,numero_5,numero_6;

select numero_1, count(*) as total from mega_sena group by numero_1; 

join gafanhoto_assiste_curso a
on g.id = a.idgafanhoto;
-- -------------------------------------
select  g.nome, c.nome from gafanhotos g
join gafanhoto_assiste_curso a
on g.id = a.idgafanhoto
join cursos c
on c.idcurso = a.idcurso
order by g.nome;

select numero_1, count(*) from mega_sena
group by numero_1;


select numero_1, numero_2, numero_3, numero_4,numero_5, numero_6, count(*) as total from mega_sena  group by numero_1, numero_2, numero_3,numero_4,numero_5,numero_6;

select numero_1, count(*) as total from mega_sena group by numero_1; 

join gafanhoto_assiste_curso a
on g.id = a.idgafanhoto;
-- -------------------------------------
select  g.nome, c.nome from gafanhotos g
join gafanhoto_assiste_curso a
on g.id = a.idgafanhoto
join cursos c
on c.idcurso = a.idcurso
order by g.nome;
